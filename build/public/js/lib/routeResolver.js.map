{"version":3,"sources":["../../../../../../public/js/lib/routeResolver.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;AAEb,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,UAAU,OAAO,EAAE;;AAEnC,QAAI,aAAa,GAAG,SAAhB,aAAa,GAAe;;AAE5B,YAAI,CAAC,IAAI,GAAG,YAAY;AACpB,mBAAO,IAAI,CAAC;SACf,CAAC;;AAEF,YAAI,CAAC,WAAW,GAAG,CAAA,YAAY;;AAE3B,gBAAI,cAAc,GAAG,qBAAqB;gBACtC,oBAAoB,GAAG,2BAA2B;gBAEtD,kBAAkB,GAAG,SAArB,kBAAkB,CAAa,QAAQ,EAAE,cAAc,EAAE;AACrD,8BAAc,GAAG,QAAQ,CAAC;AAC1B,oCAAoB,GAAG,cAAc,CAAC;aACzC;gBAED,iBAAiB,GAAG,SAApB,iBAAiB,GAAe;AAC5B,uBAAO,cAAc,CAAC;aACzB;gBAED,uBAAuB,GAAG,SAA1B,uBAAuB,GAAe;AAClC,uBAAO,oBAAoB,CAAC;aAC/B,CAAC;;AAEF,mBAAO;AACH,kCAAkB,EAAE,kBAAkB;AACtC,uCAAuB,EAAE,uBAAuB;AAChD,iCAAiB,EAAE,iBAAiB;aACvC,CAAC;SACL,CAAA,EAAE,CAAC;;AAEJ,YAAI,CAAC,KAAK,GAAG,CAAA,UAAU,WAAW,EAAE;AAChC,mBAAO,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;AACpC,gBAAI,OAAO,GAAG,SAAV,OAAO,CAAa,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;AAC5C,oBAAI,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC;;AAErB,oBAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,wBAAQ,CAAC,WAAW,GAAG,WAAW,CAAC,iBAAiB,EAAE,GAAG,IAAI,GAAG,QAAQ,GAAG,OAAO,CAAC;AACnF,wBAAQ,CAAC,UAAU,GAAG,QAAQ,GAAG,YAAY,CAAC;AAC9C,wBAAQ,CAAC,MAAM,GAAG,AAAC,MAAM,GAAI,MAAM,GAAG,KAAK,CAAC;AAC5C,wBAAQ,CAAC,OAAO,GAAG;AACf,wBAAI,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE;AACjD,4BAAI,YAAY,GAAG,CAAC,WAAW,CAAC,uBAAuB,EAAE,GAAG,IAAI,GAAG,QAAQ,GAAG,eAAe,CAAC,CAAC;;AAE/F,+BAAO,mBAAmB,CAAC,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;qBAC5D,CAAC;iBACL,CAAC;;AAEF,uBAAO,QAAQ,CAAC;aACnB;gBAED,mBAAmB,GAAG,SAAtB,mBAAmB,CAAa,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE;AAC1D,oBAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;AACvB,uBAAO,CAAC,YAAY,EAAE,YAAY;AAC9B,yBAAK,CAAC,OAAO,EAAE,CAAC;AAChB,8BAAU,CAAC,MAAM,EAAE,CAAA;iBACtB,CAAC,CAAC;;AAEH,uBAAO,KAAK,CAAC,OAAO,CAAC;aACxB,CAAC;;AAEF,mBAAO;AACH,uBAAO,EAAE,OAAO;aACnB,CAAA;SACJ,CAAA,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAEvB,CAAC;;AAEF,QAAI,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;;;AAG9D,eAAW,CAAC,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;CAExD,CAAC,CAAC","file":"routeResolver.js","sourcesContent":["/* \r\n* routeResolver.js file handles creating an AngularJS module \r\n* and provider that can dynamically load views and controllers.\r\n*\r\n*/\r\n'use strict';\r\n\r\ndefine(['angular'], function (angular) {\r\n\r\n    var routeResolver = function () {\r\n\r\n        this.$get = function () {\r\n            return this;\r\n        };\r\n\r\n        this.routeConfig = function () {\r\n\r\n            var viewsDirectory = '/CDS/scripts/views/',\r\n                controllersDirectory = '/CDS/scripts/controllers/',\r\n\r\n            setBaseDirectories = function (viewsDir, controllersDir) {\r\n                viewsDirectory = viewsDir;\r\n                controllersDirectory = controllersDir;\r\n            },\r\n\r\n            getViewsDirectory = function () {\r\n                return viewsDirectory;\r\n            },\r\n\r\n            getControllersDirectory = function () {\r\n                return controllersDirectory;\r\n            };\r\n\r\n            return {\r\n                setBaseDirectories: setBaseDirectories,\r\n                getControllersDirectory: getControllersDirectory,\r\n                getViewsDirectory: getViewsDirectory\r\n            };\r\n        }();\r\n\r\n        this.route = function (routeConfig) {\r\n            console.log(\"route 1\", routeConfig);\r\n            var resolve = function (baseName, path, secure) {\r\n                if (!path) path = '';\r\n\r\n                var routeDef = {};\r\n                routeDef.templateUrl = routeConfig.getViewsDirectory() + path + baseName + '.html';\r\n                routeDef.controller = baseName + 'Controller';\r\n                routeDef.secure = (secure) ? secure : false;\r\n                routeDef.resolve = {\r\n                    load: ['$q', '$rootScope', function ($q, $rootScope) {\r\n                        var dependencies = [routeConfig.getControllersDirectory() + path + baseName + 'Controller.js'];\r\n\r\n                        return resolveDependencies($q, $rootScope, dependencies);\r\n                    }]\r\n                };\r\n\r\n                return routeDef;\r\n            },\r\n\r\n            resolveDependencies = function ($q, $rootScope, dependencies) {\r\n                var defer = $q.defer();\r\n                require(dependencies, function () {\r\n                    defer.resolve();\r\n                    $rootScope.$apply()\r\n                });\r\n\r\n                return defer.promise;\r\n            };\r\n\r\n            return {\r\n                resolve: resolve\r\n            }\r\n        }(this.routeConfig);\r\n\r\n    };\r\n\r\n    var servicesApp = angular.module('routeResolverServices', []);\r\n\r\n    //Must be a provider since it will be injected into module.config()    \r\n    servicesApp.provider('routeResolver', routeResolver);\r\n    \r\n});"]}