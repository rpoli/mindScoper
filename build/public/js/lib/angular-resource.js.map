{"version":3,"sources":["../../../../../../public/js/lib/angular-resource.js"],"names":[],"mappings":"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","file":"angular-resource.js","sourcesContent":["/**\r\n * @license AngularJS v1.3.16-build.90+sha.06364c8\r\n * (c) 2010-2014 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular, undefined) {'use strict';\r\n\r\nvar $resourceMinErr = angular.$$minErr('$resource');\r\n\r\n// Helper functions and regex to lookup a dotted path on an object\r\n// stopping at undefined/null.  The path must be composed of ASCII\r\n// identifiers (just like $parse)\r\nvar MEMBER_NAME_REGEX = /^(\\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;\r\n\r\nfunction isValidDottedPath(path) {\r\n  return (path != null && path !== '' && path !== 'hasOwnProperty' &&\r\n      MEMBER_NAME_REGEX.test('.' + path));\r\n}\r\n\r\nfunction lookupDottedPath(obj, path) {\r\n  if (!isValidDottedPath(path)) {\r\n    throw $resourceMinErr('badmember', 'Dotted member path \"@{0}\" is invalid.', path);\r\n  }\r\n  var keys = path.split('.');\r\n  for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {\r\n    var key = keys[i];\r\n    obj = (obj !== null) ? obj[key] : undefined;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Create a shallow copy of an object and clear other fields from the destination\r\n */\r\nfunction shallowClearAndCopy(src, dst) {\r\n  dst = dst || {};\r\n\r\n  angular.forEach(dst, function(value, key) {\r\n    delete dst[key];\r\n  });\r\n\r\n  for (var key in src) {\r\n    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {\r\n      dst[key] = src[key];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngResource\r\n * @description\r\n *\r\n * # ngResource\r\n *\r\n * The `ngResource` module provides interaction support with RESTful services\r\n * via the $resource service.\r\n *\r\n *\r\n * <div doc-module-components=\"ngResource\"></div>\r\n *\r\n * See {@link ngResource.$resource `$resource`} for usage.\r\n */\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $resource\r\n * @requires $http\r\n *\r\n * @description\r\n * A factory which creates a resource object that lets you interact with\r\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\r\n *\r\n * The returned resource object has action methods which provide high-level behaviors without\r\n * the need to interact with the low level {@link ng.$http $http} service.\r\n *\r\n * Requires the {@link ngResource `ngResource`} module to be installed.\r\n *\r\n * By default, trailing slashes will be stripped from the calculated URLs,\r\n * which can pose problems with server backends that do not expect that\r\n * behavior.  This can be disabled by configuring the `$resourceProvider` like\r\n * this:\r\n *\r\n * ```js\r\n     app.config(['$resourceProvider', function($resourceProvider) {\r\n       // Don't strip trailing slashes from calculated URLs\r\n       $resourceProvider.defaults.stripTrailingSlashes = false;\r\n     }]);\r\n * ```\r\n *\r\n * @param {string} url A parametrized URL template with parameters prefixed by `:` as in\r\n *   `/user/:username`. If you are using a URL with a port number (e.g.\r\n *   `http://example.com:8080/api`), it will be respected.\r\n *\r\n *   If you are using a url with a suffix, just add the suffix, like this:\r\n *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\r\n *   or even `$resource('http://example.com/resource/:resource_id.:format')`\r\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\r\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\r\n *   can escape it with `/\\.`.\r\n *\r\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\r\n *   `actions` methods. If any of the parameter value is a function, it will be executed every time\r\n *   when a param value needs to be obtained for a request (unless the param was overridden).\r\n *\r\n *   Each key value in the parameter object is first bound to url template if present and then any\r\n *   excess keys are appended to the url search query after the `?`.\r\n *\r\n *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\r\n *   URL `/path/greet?salutation=Hello`.\r\n *\r\n *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted\r\n *   from the corresponding property on the `data` object (provided when calling an action method).  For\r\n *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`\r\n *   will be `data.someProp`.\r\n *\r\n * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend\r\n *   the default set of resource actions. The declaration should be created in the format of {@link\r\n *   ng.$http#usage $http.config}:\r\n *\r\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\r\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\r\n *        ...}\r\n *\r\n *   Where:\r\n *\r\n *   - **`action`** – {string} – The name of action. This name becomes the name of the method on\r\n *     your resource object.\r\n *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\r\n *     `DELETE`, `JSONP`, etc).\r\n *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\r\n *     the parameter value is a function, it will be executed every time when a param value needs to\r\n *     be obtained for a request (unless the param was overridden).\r\n *   - **`url`** – {string} – action specific `url` override. The url templating is supported just\r\n *     like for the resource-level urls.\r\n *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\r\n *     see `returns` section.\r\n *   - **`transformRequest`** –\r\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\r\n *     transform function or an array of such functions. The transform function takes the http\r\n *     request body and headers and returns its transformed (typically serialized) version.\r\n *     By default, transformRequest will contain one function that checks if the request data is\r\n *     an object and serializes to using `angular.toJson`. To prevent this behavior, set\r\n *     `transformRequest` to an empty array: `transformRequest: []`\r\n *   - **`transformResponse`** –\r\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\r\n *     transform function or an array of such functions. The transform function takes the http\r\n *     response body and headers and returns its transformed (typically deserialized) version.\r\n *     By default, transformResponse will contain one function that checks if the response looks like\r\n *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set\r\n *     `transformResponse` to an empty array: `transformResponse: []`\r\n *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\r\n *     GET request, otherwise if a cache instance built with\r\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\r\n *     caching.\r\n *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that\r\n *     should abort the request when resolved.\r\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\r\n *     XHR object. See\r\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\r\n *     for more information.\r\n *   - **`responseType`** - `{string}` - see\r\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\r\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\r\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\r\n *     with `http response` object. See {@link ng.$http $http interceptors}.\r\n *\r\n * @param {Object} options Hash with custom settings that should extend the\r\n *   default `$resourceProvider` behavior.  The only supported option is\r\n *\r\n *   Where:\r\n *\r\n *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing\r\n *   slashes from any calculated URL will be stripped. (Defaults to true.)\r\n *\r\n * @returns {Object} A resource \"class\" object with methods for the default set of resource actions\r\n *   optionally extended with custom `actions`. The default set contains these actions:\r\n *   ```js\r\n *   { 'get':    {method:'GET'},\r\n *     'save':   {method:'POST'},\r\n *     'query':  {method:'GET', isArray:true},\r\n *     'remove': {method:'DELETE'},\r\n *     'delete': {method:'DELETE'} };\r\n *   ```\r\n *\r\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\r\n *   destination and parameters. When the data is returned from the server then the object is an\r\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\r\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\r\n *   read, update, delete) on server-side data like this:\r\n *   ```js\r\n *   var User = $resource('/user/:userId', {userId:'@id'});\r\n *   var user = User.get({userId:123}, function() {\r\n *     user.abc = true;\r\n *     user.$save();\r\n *   });\r\n *   ```\r\n *\r\n *   It is important to realize that invoking a $resource object method immediately returns an\r\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\r\n *   server the existing reference is populated with the actual data. This is a useful trick since\r\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\r\n *   object results in no rendering, once the data arrives from the server then the object is\r\n *   populated with the data and the view automatically re-renders itself showing the new data. This\r\n *   means that in most cases one never has to write a callback function for the action methods.\r\n *\r\n *   The action methods on the class object or instance object can be invoked with the following\r\n *   parameters:\r\n *\r\n *   - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\r\n *   - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\r\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\r\n *\r\n *\r\n *   Success callback is called with (value, responseHeaders) arguments. Error callback is called\r\n *   with (httpResponse) argument.\r\n *\r\n *   Class actions return empty instance (with additional properties below).\r\n *   Instance actions return promise of the action.\r\n *\r\n *   The Resource instances and collection have these additional properties:\r\n *\r\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\r\n *     instance or collection.\r\n *\r\n *     On success, the promise is resolved with the same resource instance or collection object,\r\n *     updated with data from server. This makes it easy to use in\r\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\r\n *     rendering until the resource(s) are loaded.\r\n *\r\n *     On failure, the promise is resolved with the {@link ng.$http http response} object, without\r\n *     the `resource` property.\r\n *\r\n *     If an interceptor object was provided, the promise will instead be resolved with the value\r\n *     returned by the interceptor.\r\n *\r\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\r\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\r\n *      data-binding.\r\n *\r\n * @example\r\n *\r\n * # Credit card resource\r\n *\r\n * ```js\r\n     // Define CreditCard class\r\n     var CreditCard = $resource('/user/:userId/card/:cardId',\r\n      {userId:123, cardId:'@id'}, {\r\n       charge: {method:'POST', params:{charge:true}}\r\n      });\r\n\r\n     // We can retrieve a collection from the server\r\n     var cards = CreditCard.query(function() {\r\n       // GET: /user/123/card\r\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\r\n\r\n       var card = cards[0];\r\n       // each item is an instance of CreditCard\r\n       expect(card instanceof CreditCard).toEqual(true);\r\n       card.name = \"J. Smith\";\r\n       // non GET methods are mapped onto the instances\r\n       card.$save();\r\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\r\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\r\n\r\n       // our custom method is mapped as well.\r\n       card.$charge({amount:9.99});\r\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\r\n     });\r\n\r\n     // we can create an instance as well\r\n     var newCard = new CreditCard({number:'0123'});\r\n     newCard.name = \"Mike Smith\";\r\n     newCard.$save();\r\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\r\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\r\n     expect(newCard.id).toEqual(789);\r\n * ```\r\n *\r\n * The object returned from this function execution is a resource \"class\" which has \"static\" method\r\n * for each action in the definition.\r\n *\r\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\r\n * `headers`.\r\n * When the data is returned from the server then the object is an instance of the resource type and\r\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\r\n * operations (create, read, update, delete) on server-side data.\r\n\r\n   ```js\r\n     var User = $resource('/user/:userId', {userId:'@id'});\r\n     User.get({userId:123}, function(user) {\r\n       user.abc = true;\r\n       user.$save();\r\n     });\r\n   ```\r\n *\r\n * It's worth noting that the success callback for `get`, `query` and other methods gets passed\r\n * in the response that came from the server as well as $http header getter function, so one\r\n * could rewrite the above example and get access to http headers as:\r\n *\r\n   ```js\r\n     var User = $resource('/user/:userId', {userId:'@id'});\r\n     User.get({userId:123}, function(u, getResponseHeaders){\r\n       u.abc = true;\r\n       u.$save(function(u, putResponseHeaders) {\r\n         //u => saved user object\r\n         //putResponseHeaders => $http header getter\r\n       });\r\n     });\r\n   ```\r\n *\r\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\r\n *\r\n   ```\r\n     var User = $resource('/user/:userId', {userId:'@id'});\r\n     User.get({userId:123})\r\n         .$promise.then(function(user) {\r\n           $scope.user = user;\r\n         });\r\n   ```\r\n\r\n * # Creating a custom 'PUT' request\r\n * In this example we create a custom method on our resource to make a PUT request\r\n * ```js\r\n *    var app = angular.module('app', ['ngResource', 'ngRoute']);\r\n *\r\n *    // Some APIs expect a PUT request in the format URL/object/ID\r\n *    // Here we are creating an 'update' method\r\n *    app.factory('Notes', ['$resource', function($resource) {\r\n *    return $resource('/notes/:id', null,\r\n *        {\r\n *            'update': { method:'PUT' }\r\n *        });\r\n *    }]);\r\n *\r\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\r\n *    // We pass in $routeParams and our Notes factory along with $scope\r\n *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\r\n                                      function($scope, $routeParams, Notes) {\r\n *    // First get a note object from the factory\r\n *    var note = Notes.get({ id:$routeParams.id });\r\n *    $id = note.id;\r\n *\r\n *    // Now call update passing in the ID first then the object you are updating\r\n *    Notes.update({ id:$id }, note);\r\n *\r\n *    // This will PUT /notes/ID with the note object in the request payload\r\n *    }]);\r\n * ```\r\n */\r\nangular.module('ngResource', ['ng']).\r\n  provider('$resource', function() {\r\n    var provider = this;\r\n\r\n    this.defaults = {\r\n      // Strip slashes by default\r\n      stripTrailingSlashes: true,\r\n\r\n      // Default actions configuration\r\n      actions: {\r\n        'get': {method: 'GET'},\r\n        'save': {method: 'POST'},\r\n        'query': {method: 'GET', isArray: true},\r\n        'remove': {method: 'DELETE'},\r\n        'delete': {method: 'DELETE'}\r\n      }\r\n    };\r\n\r\n    this.$get = ['$http', '$q', function($http, $q) {\r\n\r\n      var noop = angular.noop,\r\n        forEach = angular.forEach,\r\n        extend = angular.extend,\r\n        copy = angular.copy,\r\n        isFunction = angular.isFunction;\r\n\r\n      /**\r\n       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\r\n       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\r\n       * (pchar) allowed in path segments:\r\n       *    segment       = *pchar\r\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\r\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\r\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\r\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n       */\r\n      function encodeUriSegment(val) {\r\n        return encodeUriQuery(val, true).\r\n          replace(/%26/gi, '&').\r\n          replace(/%3D/gi, '=').\r\n          replace(/%2B/gi, '+');\r\n      }\r\n\r\n\r\n      /**\r\n       * This method is intended for encoding *key* or *value* parts of query component. We need a\r\n       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\r\n       * have to be encoded per http://tools.ietf.org/html/rfc3986:\r\n       *    query       = *( pchar / \"/\" / \"?\" )\r\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\r\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\r\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\r\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n       */\r\n      function encodeUriQuery(val, pctEncodeSpaces) {\r\n        return encodeURIComponent(val).\r\n          replace(/%40/gi, '@').\r\n          replace(/%3A/gi, ':').\r\n          replace(/%24/g, '$').\r\n          replace(/%2C/gi, ',').\r\n          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\r\n      }\r\n\r\n      function Route(template, defaults) {\r\n        this.template = template;\r\n        this.defaults = extend({}, provider.defaults, defaults);\r\n        this.urlParams = {};\r\n      }\r\n\r\n      Route.prototype = {\r\n        setUrlParams: function(config, params, actionUrl) {\r\n          var self = this,\r\n            url = actionUrl || self.template,\r\n            val,\r\n            encodedVal;\r\n\r\n          var urlParams = self.urlParams = {};\r\n          forEach(url.split(/\\W/), function(param) {\r\n            if (param === 'hasOwnProperty') {\r\n              throw $resourceMinErr('badname', \"hasOwnProperty is not a valid parameter name.\");\r\n            }\r\n            if (!(new RegExp(\"^\\\\d+$\").test(param)) && param &&\r\n              (new RegExp(\"(^|[^\\\\\\\\]):\" + param + \"(\\\\W|$)\").test(url))) {\r\n              urlParams[param] = true;\r\n            }\r\n          });\r\n          url = url.replace(/\\\\:/g, ':');\r\n\r\n          params = params || {};\r\n          forEach(self.urlParams, function(_, urlParam) {\r\n            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];\r\n            if (angular.isDefined(val) && val !== null) {\r\n              encodedVal = encodeUriSegment(val);\r\n              url = url.replace(new RegExp(\":\" + urlParam + \"(\\\\W|$)\", \"g\"), function(match, p1) {\r\n                return encodedVal + p1;\r\n              });\r\n            } else {\r\n              url = url.replace(new RegExp(\"(\\/?):\" + urlParam + \"(\\\\W|$)\", \"g\"), function(match,\r\n                  leadingSlashes, tail) {\r\n                if (tail.charAt(0) == '/') {\r\n                  return tail;\r\n                } else {\r\n                  return leadingSlashes + tail;\r\n                }\r\n              });\r\n            }\r\n          });\r\n\r\n          // strip trailing slashes and set the url (unless this behavior is specifically disabled)\r\n          if (self.defaults.stripTrailingSlashes) {\r\n            url = url.replace(/\\/+$/, '') || '/';\r\n          }\r\n\r\n          // then replace collapse `/.` if found in the last URL path segment before the query\r\n          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\r\n          url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\r\n          // replace escaped `/\\.` with `/.`\r\n          config.url = url.replace(/\\/\\\\\\./, '/.');\r\n\r\n\r\n          // set params - delegate param encoding to $http\r\n          forEach(params, function(value, key) {\r\n            if (!self.urlParams[key]) {\r\n              config.params = config.params || {};\r\n              config.params[key] = value;\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n\r\n      function resourceFactory(url, paramDefaults, actions, options) {\r\n        var route = new Route(url, options);\r\n\r\n        actions = extend({}, provider.defaults.actions, actions);\r\n\r\n        function extractParams(data, actionParams) {\r\n          var ids = {};\r\n          actionParams = extend({}, paramDefaults, actionParams);\r\n          forEach(actionParams, function(value, key) {\r\n            if (isFunction(value)) { value = value(); }\r\n            ids[key] = value && value.charAt && value.charAt(0) == '@' ?\r\n              lookupDottedPath(data, value.substr(1)) : value;\r\n          });\r\n          return ids;\r\n        }\r\n\r\n        function defaultResponseInterceptor(response) {\r\n          return response.resource;\r\n        }\r\n\r\n        function Resource(value) {\r\n          shallowClearAndCopy(value || {}, this);\r\n        }\r\n\r\n        Resource.prototype.toJSON = function() {\r\n          var data = extend({}, this);\r\n          delete data.$promise;\r\n          delete data.$resolved;\r\n          return data;\r\n        };\r\n\r\n        forEach(actions, function(action, name) {\r\n          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);\r\n\r\n          Resource[name] = function(a1, a2, a3, a4) {\r\n            var params = {}, data, success, error;\r\n\r\n            /* jshint -W086 */ /* (purposefully fall through case statements) */\r\n            switch (arguments.length) {\r\n              case 4:\r\n                error = a4;\r\n                success = a3;\r\n              //fallthrough\r\n              case 3:\r\n              case 2:\r\n                if (isFunction(a2)) {\r\n                  if (isFunction(a1)) {\r\n                    success = a1;\r\n                    error = a2;\r\n                    break;\r\n                  }\r\n\r\n                  success = a2;\r\n                  error = a3;\r\n                  //fallthrough\r\n                } else {\r\n                  params = a1;\r\n                  data = a2;\r\n                  success = a3;\r\n                  break;\r\n                }\r\n              case 1:\r\n                if (isFunction(a1)) success = a1;\r\n                else if (hasBody) data = a1;\r\n                else params = a1;\r\n                break;\r\n              case 0: break;\r\n              default:\r\n                throw $resourceMinErr('badargs',\r\n                  \"Expected up to 4 arguments [params, data, success, error], got {0} arguments\",\r\n                  arguments.length);\r\n            }\r\n            /* jshint +W086 */ /* (purposefully fall through case statements) */\r\n\r\n            var isInstanceCall = this instanceof Resource;\r\n            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\r\n            var httpConfig = {};\r\n            var responseInterceptor = action.interceptor && action.interceptor.response ||\r\n              defaultResponseInterceptor;\r\n            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||\r\n              undefined;\r\n\r\n            forEach(action, function(value, key) {\r\n              if (key != 'params' && key != 'isArray' && key != 'interceptor') {\r\n                httpConfig[key] = copy(value);\r\n              }\r\n            });\r\n\r\n            if (hasBody) httpConfig.data = data;\r\n            route.setUrlParams(httpConfig,\r\n              extend({}, extractParams(data, action.params || {}), params),\r\n              action.url);\r\n\r\n            var promise = $http(httpConfig).then(function(response) {\r\n              var data = response.data,\r\n                promise = value.$promise;\r\n\r\n              if (data) {\r\n                // Need to convert action.isArray to boolean in case it is undefined\r\n                // jshint -W018\r\n                if (angular.isArray(data) !== (!!action.isArray)) {\r\n                  throw $resourceMinErr('badcfg',\r\n                      'Error in resource configuration for action `{0}`. Expected response to ' +\r\n                      'contain an {1} but got an {2}', name, action.isArray ? 'array' : 'object',\r\n                    angular.isArray(data) ? 'array' : 'object');\r\n                }\r\n                // jshint +W018\r\n                if (action.isArray) {\r\n                  value.length = 0;\r\n                  forEach(data, function(item) {\r\n                    if (typeof item === \"object\") {\r\n                      value.push(new Resource(item));\r\n                    } else {\r\n                      // Valid JSON values may be string literals, and these should not be converted\r\n                      // into objects. These items will not have access to the Resource prototype\r\n                      // methods, but unfortunately there\r\n                      value.push(item);\r\n                    }\r\n                  });\r\n                } else {\r\n                  shallowClearAndCopy(data, value);\r\n                  value.$promise = promise;\r\n                }\r\n              }\r\n\r\n              value.$resolved = true;\r\n\r\n              response.resource = value;\r\n\r\n              return response;\r\n            }, function(response) {\r\n              value.$resolved = true;\r\n\r\n              (error || noop)(response);\r\n\r\n              return $q.reject(response);\r\n            });\r\n\r\n            promise = promise.then(\r\n              function(response) {\r\n                var value = responseInterceptor(response);\r\n                (success || noop)(value, response.headers);\r\n                return value;\r\n              },\r\n              responseErrorInterceptor);\r\n\r\n            if (!isInstanceCall) {\r\n              // we are creating instance / collection\r\n              // - set the initial promise\r\n              // - return the instance / collection\r\n              value.$promise = promise;\r\n              value.$resolved = false;\r\n\r\n              return value;\r\n            }\r\n\r\n            // instance call\r\n            return promise;\r\n          };\r\n\r\n\r\n          Resource.prototype['$' + name] = function(params, success, error) {\r\n            if (isFunction(params)) {\r\n              error = success; success = params; params = {};\r\n            }\r\n            var result = Resource[name].call(this, params, this, success, error);\r\n            return result.$promise || result;\r\n          };\r\n        });\r\n\r\n        Resource.bind = function(additionalParamDefaults) {\r\n          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);\r\n        };\r\n\r\n        return Resource;\r\n      }\r\n\r\n      return resourceFactory;\r\n    }];\r\n  });\r\n\r\n\r\n})(window, window.angular);\r\n"]}